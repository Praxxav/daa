#include <iostream>
using namespace std;

int max(int a, int b) {
    return (a > b) ? a : b;
}

int table(int weight[], int profit[], int n, int cap) 
{
    int arr[n + 1][cap + 1];

    // Initialize first row based on first item's weight and profit
    for (int w = 0; w <= cap; w++)
    {
        if (weight[0] <= w)
        {
            arr[0][w] = profit[0];
        }
        else
        {
            arr[0][w] = 0;
        }
    }

    // Fill the table using bottom-up approach
    for (int i = 1; i <= n; i++) 
    {
        for (int w = 0; w <= cap; w++)
        {
            if (i == 0 || w == 0)
            {
                arr[i][w] = 0;
            }
            else if (weight[i - 1] <= w)
            {
                arr[i][w] = max(profit[i - 1] + arr[i - 1][w - weight[i - 1]], arr[i - 1][w]);
            }
            else
            {
                arr[i][w] = arr[i - 1][w];
            }
        }
    }

    // Print the table
    for (int i = 0; i <= n; i++)
    {
        cout << "\n";
        for (int w = 0; w <= cap; w++) 
        {
            cout << " " << arr[i][w] << " ";
        }
    }
    cout << "\n";

    return arr[n][cap];
}

int main() {
    int n, cap;

    cout << "Enter the number of objects to be inserted: ";
    cin >> n;

    cout << "Enter capacity of knapsack: ";
    cin >> cap;

    int weight[n], profit[n];

    cout << "\nEnter weight of objects:\n";
    for (int i = 0; i < n; i++) {
        cin >> weight[i];
    }

    cout << "\nEnter profit of the objects:\n";
    for (int i = 0; i < n; i++) {
        cin >> profit[i];
    }

    int value = table(weight, profit, n, cap);
    cout << "\nMaximum profit is " << value;

    return 0;
}